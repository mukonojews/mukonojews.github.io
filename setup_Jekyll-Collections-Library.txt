What Are Jekyll Collections?

Jekyll Collections are a powerful way to organize and manage structured content in a static site. They allow you to group items (like books, articles, media, etc.) in a way that can be easily queried and displayed within your site, but they are not databases in the traditional sense (e.g., relational databases). Instead, collections are a way of organizing and structuring your content within your Jekyll project using files.
How Collections Work in Jekyll:

    Define a Collection: You define a collection in Jekyll’s _config.yml. A collection can be any group of files, such as blog posts, books, or library entries.

    Files in the Collection: Each item in the collection is a file (Markdown, HTML, or other) stored in a dedicated folder, usually _library/, _posts/, or similar.

    Accessing and Displaying Data: You can loop through the files in your collection using Liquid templating to display them in a list or in other formats.

Example of Setting Up a Collection for an Online Library:
1. Define the Collection in _config.yml

collections:
  library:
    output: true
    permalink: /library/:name/

This tells Jekyll that you want to create a collection called library. The output: true means each item in the collection will be rendered into a page.
2. Add Files to the Collection

Place your books, articles, or library items in a folder named _library/ (or any name you choose). Each item should be a separate Markdown file.

Example structure:

_library/
  book1.md
  book2.md
  article1.md

Each file in the collection should look like this:

---
title: "The Book Title"
author: "Author Name"
category: "Category"
published_date: "2025-01-01"
---

## Description
This is the book's description or other content.

3. Loop Through the Collection in Your Template

In your layout file (e.g., index.html or library.html), you can loop through the collection and display the items:

<ul>
  {% for book in site.library %}
    <li>
      <h3>{{ book.title }}</h3>
      <p>By {{ book.author }}</p>
      <p>{{ book.published_date }}</p>
      <p>{{ book.content | truncatewords: 30 }}</p>
    </li>
  {% endfor %}
</ul>

This will display a list of books (or whatever items you have in your collection), showing their title, author, and a truncated description.
4. Linking to Individual Items

Each item in the collection can have its own page, which is automatically generated by Jekyll based on its filename and metadata in the front matter. For example, book1.md will be accessible at /library/book1/.
Key Features of Jekyll Collections:

    Static File-Based: Jekyll Collections are based on static files (Markdown, HTML, etc.), not a database.

    No Database Backend: Unlike traditional CMS or databases, Jekyll collections don’t store data in a separate database. All content lives in your GitHub repo and is rendered at build time.

    Metadata: Each collection item can have metadata (front matter) that you can use to sort, filter, or display content.

    Flexible: You can organize content however you want using collections and can loop through, sort, and filter using Liquid.

Limitations of Jekyll Collections (as a "database")

    No Dynamic Behavior: Collections are static, meaning you can't make real-time changes to the data (like adding books from an external system).

    Manual Management: You manage content by editing files directly (in Markdown or other formats), which may not be as user-friendly as a database-backed CMS.

    Not Ideal for Large Data Sets: For large libraries or data-heavy sites, managing many files manually could become cumbersome, whereas a database would be more efficient.

Conclusion:

Jekyll Collections provide an easy-to-use system for organizing content in a structured way within a static site, but they aren’t a true database. They are ideal for smaller to medium static content libraries (like books or articles). For dynamic or large-scale systems, other tools like Airtable, Google Sheets, or a true backend system might be more appropriate.

